<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lcdt.contract.dao.ConditionQueryMapper" >
<select id="selectByCondition" resultType="com.lcdt.contract.web.dto.OrderDto">
      select order_id orderId, supplier, order_no orderNo, order_type orderType, contract_code contractCode, dispatching_type dispatchingType, 
    pay_type payType, receive_warehouse receiveWarehouse, sender, sender_phone senderPhone, send_province sendProvince, 
    send_city sendCity, send_district sendDistrict, send_address sendAddress, send_time sendTime, pack_require packRequire, receiver, 
    receiver_phone receiverPhone, receiver_province receiverProvince, receiver_city receiverCity, receive_district receiveDistrict, 
    receive_address receiveAddress, remarks, create_time createTime, group_id groupId,company_id companyId,receive_time receiveTime,
    approval_start_date approvalStartDate,approval_end_date approvalEndDate,create_user_id createUserId,order_serial_no orderSerialNo,
    approval_process_id approvalProcessId,
    approval_status approvalStatus,approval_process approvalProcess,supplier_id supplierId,is_draft isDraft,receive_require receiveRequire,
    summation,warehouse_id warehouseId,attachment1_name attachment1Name,attachment1,attachment2_name attachment2Name,attachment2,
    attachment3_name attachment3Name,attachment3,attachment4_name attachment4Name,attachment4,attachment5_name attachment5Name,attachment5
    from t_order
    where
       company_id = #{companyId,jdbcType=BIGINT} and order_type = #{orderType,jdbcType=SMALLINT} 
       <if test="supplier!=null and supplier!=''">
       and supplier like concat('%',#{supplier,jdbcType=VARCHAR},'%')
      </if>
      <if test="supplierId !=null">
         and supplier_id =#{supplierId,jdbcType=BIGINT}
      </if>
      <if test="orderNo !=null and orderNo!=''">
    	 and order_no like concat('%',#{orderNo,jdbcType=VARCHAR},'%')                                             
      </if>
      <if test="orderSerialNo !=null and orderSerialNo!=''">
    	 and order_serial_no like concat('%',#{orderSerialNo,jdbcType=VARCHAR},'%')                                             
      </if>
      <if test="groupId !=null">
      	and group_id=#{groupId,jdbcType=BIGINT}
      </if>
      <if test="contractCode !=null and contractCode!=''">
        and contract_code like concat('%',#{contractCode,jdbcType=VARCHAR},'%')
      </if>
      <if test="dispatchingType!=null">
        and dispatching_type = #{dispatchingType,jdbcType=SMALLINT}
      </if>
      <if test="payType!=null and payType!=''">
        and pay_type = #{payType,jdbcType=VARCHAR}
      </if>
    <!--   <if test="beginTime != null and beginTime !=''and endTime != null and endTime !=''">
      and create_time between concat(#{beginTime,jdbcType=TIMESTAMP},'000000')  and  concat(#{endTime,jdbcType=TIMESTAMP},'235959')                
      </if> -->
      <if test="beginTime != null and beginTime !=''">
       and create_time &gt; concat(#{beginTime,jdbcType=TIMESTAMP},' 00:00:00')
      </if>
      <if test="endTime != null and endTime !=''">
      and create_time &lt; concat(#{endTime,jdbcType=TIMESTAMP},' 23:59:59')
      </if>
      <if test="isDraft!=null">
         and is_draft= #{isDraft,jdbcType=SMALLINT}
      </if> 
   <!--  <if test="approvalStatus!=null ">
         and approval_status = #{approvalStatus,jdbcType=SMALLINT}
      </if>  -->
    	order by create_time desc
  </select>
  <select id="selectByOrderId" resultType="com.lcdt.contract.model.OrderProduct" parameterType="java.lang.Long" >
    select 
    op_id opId, order_id orderId, name, code, sku, num, price, total,spec
    from t_order_product
    where order_id = #{orderId,jdbcType=BIGINT}
  </select>
  
  <select id="selectOrderProductIdByOrderId" resultType="java.lang.Long" parameterType="java.lang.Long" >
    select 
    op_id opId
    from t_order_product
    where order_id = #{orderId,jdbcType=BIGINT}
  </select>
  
  <insert id="insertOrderProductByBatch" parameterType="java.util.List">
    insert into t_order_product (op_id,order_id, name, 
      code, sku, num, price, 
      total,spec)
    values 
    <foreach collection="list"  item="op" index="index" separator=",">
      (#{op.opId,jdbcType=BIGINT},#{op.orderId,jdbcType=BIGINT}, #{op.name,jdbcType=VARCHAR}, 
      #{op.code,jdbcType=VARCHAR}, #{op.sku,jdbcType=VARCHAR}, #{op.num,jdbcType=DECIMAL}, #{op.price,jdbcType=DECIMAL}, 
      #{op.total,jdbcType=DECIMAL},#{op.spec,jdbcType=VARCHAR})
    </foreach>
  </insert>
  
  <update id="updateOrderProductByBatch" parameterType="java.util.List">
    <foreach separator=";" index="index" item="op" collection="list" close="" open="">
      update t_order_product
      set 
      order_id = #{op.orderId,jdbcType=BIGINT},
      name = #{op.name,jdbcType=VARCHAR},
      code= #{op.code,jdbcType=VARCHAR},
      sku = #{op.sku,jdbcType=VARCHAR},
      num = #{op.num,jdbcType=DECIMAL},
      price = #{op.price,jdbcType=DECIMAL},
      total = #{op.total,jdbcType=DECIMAL},
      spec = #{op.spec,jdbcType=VARCHAR}
      where op_id = #{op.opId,jdbcType=BIGINT}
    </foreach>
  </update>
  
  
  <delete id="deleteOrderProducByBatch" parameterType="java.util.List">
  	 <foreach separator=";" index="index" item="op" collection="list" close="" open="">
     delete 
     from t_order_product
     where op_id=#{op,jdbcType=BIGINT}
    </foreach>
  </delete>
  	
  	<delete id="deleteOrderProductByOrderId"  parameterType="java.lang.Long">
  	 delete 
     from t_order_product
     where order_id=#{orderId,jdbcType=BIGINT}
  	</delete>
  	
  	<select id="paymentInfo" resultType="java.util.Map">
        SELECT order_id,
        CASE
        WHEN t3.payment_sure &lt; t3.purchase_sum THEN 1 ELSE 2 END AS payment_status,
        payment_num, t3.payment_sum, t3.payment_sure, t3.purchase_sum
        FROM
        (SELECT t0.order_id, '0' AS payment_status,
        count(t0.order_id) AS payment_num,
        sum(t0.payment_sum) AS payment_sum,
        sum(t0.payment_sure) AS payment_sure,
        max(t0.purchase_sum) AS purchase_sum
        FROM
        (SELECT t1.order_id, t1.payment_sum, t1.purchase_sum,
        CASE WHEN t1.payment_time IS NULL THEN 0 ELSE t1.payment_sum END AS payment_sure
        FROM t_payment_application t1  LEFT JOIN t_order t2 ON t1.order_id = t2.order_id
        WHERE t1.order_id IN
        <foreach collection="arg0" item="item" index="index" open="(" close=")" separator=",">
            #{item.orderId}
        </foreach>
        and t1.company_id = #{arg1} and t1.approval_status in (0,1,2)
        ) t0
        GROUP BY t0.order_id
        ) t3
    </select>
    <select id="billingInfo" resultType="java.util.Map">
        SELECT
        t1.order_id,count(t1.order_id) as billing_record_num
        FROM
        t_billing_record t1
        LEFT JOIN t_order t2 ON t1.order_id = t2.order_id
        WHERE
        t1.order_id IN
        <foreach collection="arg0" item="item" index="index" open="(" close=")" separator=",">
            #{item.orderId}
        </foreach>
        and t2.company_id = #{arg1}
        GROUP BY
        t1.order_id
    </select>
  	
</mapper>